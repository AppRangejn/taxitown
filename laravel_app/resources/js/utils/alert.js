import Swal from "sweetalert2";
import "sweetalert2/dist/sweetalert2.min.css";
import { useToast } from "vue-toastification";

/**
 * Alert Utility (TaxiTown Edition)
 * –ö–æ–º–±—ñ–Ω—É—î SweetAlert2 + Vue Toastification
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –ø–æ–º–∏–ª–æ–∫, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å, —Ç–æ—Å—Ç—ñ–≤
 */

/**
 * üåì –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–º–∏ (—Å–≤—ñ—Ç–ª–∞/—Ç–µ–º–Ω–∞)
 */
function getThemeColors() {
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    if (prefersDark || document.documentElement.classList.contains("dark")) {
        // –¢–µ–º–Ω–∞ —Ç–µ–º–∞
        return {
            background: "#1f2937", // gray-800
            color: "#f9fafb", // text-gray-100
            confirmButtonColor: "#10b981", // emerald-500
            cancelButtonColor: "#6b7280", // gray-500
            borderColor: "#374151", // gray-700
        };
    } else {
        // –°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞
        return {
            background: "#f9fafb", // gray-50
            color: "#1f2937", // gray-800
            confirmButtonColor: "#10b981", // emerald-500
            cancelButtonColor: "#9ca3af", // gray-400
            borderColor: "#d1d5db", // gray-300
        };
    }
}

/**
 * üîß –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å SweetAlert2 –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ç–µ–º–∏
 */
function getBaseConfig() {
    const theme = getThemeColors();
    return {
        background: theme.background,
        color: theme.color,
        confirmButtonColor: theme.confirmButtonColor,
        cancelButtonColor: theme.cancelButtonColor,
        customClass: {
            popup: `rounded-2xl shadow-2xl backdrop-blur-md border border-[${theme.borderColor}]`,
            confirmButton: "px-4 py-2 rounded-lg font-semibold",
            cancelButton: "px-4 py-2 rounded-lg font-semibold",
        },
    };
}

/**
 * üåü –û—Å–Ω–æ–≤–Ω–∏–π –æ–±‚Äô—î–∫—Ç Alert
 */
const Alert = {
    // === TOAST (Toastification) ===
    toast(message = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", type = "info", timeout = 3000) {
        const toast = useToast();
        switch (type) {
            case "success":
                toast.success(message, { timeout });
                break;
            case "error":
                toast.error(message, { timeout });
                break;
            case "warning":
                toast.warning(message, { timeout });
                break;
            case "info":
            default:
                toast.info(message, { timeout });
        }
    },

    // === –ú–û–î–ê–õ–ö–ò SweetAlert2 ===
    success(title = "–£—Å–ø—ñ—à–Ω–æ!", text = "", timer = 2000) {
        return Swal.fire({
            ...getBaseConfig(),
            icon: "success",
            title,
            text,
            timer,
            showConfirmButton: false,
        });
    },

    error(title = "–ü–æ–º–∏–ª–∫–∞!", text = "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢") {
        return Swal.fire({
            ...getBaseConfig(),
            icon: "error",
            title,
            text,
        });
    },

    info(title = "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", text = "") {
        return Swal.fire({
            ...getBaseConfig(),
            icon: "info",
            title,
            text,
        });
    },

    warning(title = "–£–≤–∞–≥–∞!", text = "") {
        return Swal.fire({
            ...getBaseConfig(),
            icon: "warning",
            title,
            text,
        });
    },

    async confirm(
        title = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
        text = "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?",
        confirmText = "–¢–∞–∫",
        cancelText = "–°–∫–∞—Å—É–≤–∞—Ç–∏"
    ) {
        return Swal.fire({
            ...getBaseConfig(),
            title,
            text,
            icon: "question",
            showCancelButton: true,
            confirmButtonText: confirmText,
            cancelButtonText: cancelText,
        });
    },
};

/**
 * üåç –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–∞–º—ñ–Ω–∏ window.alert —ñ window.confirm
 * (—â–æ–± –Ω–∞–≤—ñ—Ç—å —Å—Ç–∞—Ä–∏–π –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤ –≥–∞—Ä–Ω—ñ –≤—ñ–∫–Ω–∞)
 */
window.alert = (message) => {
    Alert.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", message);
};

window.confirm = async (message) => {
    const result = await Alert.confirm("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", message);
    return result.isConfirmed; // true / false
};

export default Alert;
